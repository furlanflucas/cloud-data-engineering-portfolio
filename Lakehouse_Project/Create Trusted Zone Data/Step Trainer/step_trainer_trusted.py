# -*- coding: utf-8 -*-
"""step_trainer_trusted.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ydkRGUE8ivoz7izOhsqqNF6-vtolGxsE
"""

import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsgluedq.transforms import EvaluateDataQuality
from awsglue import DynamicFrame

def sparkSqlQuery(glueContext, query, mapping, transformation_ctx) -> DynamicFrame:
    for alias, frame in mapping.items():
        frame.toDF().createOrReplaceTempView(alias)
    result = spark.sql(query)
    return DynamicFrame.fromDF(result, glueContext, transformation_ctx)

args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Default ruleset used by all target nodes with data quality enabled
DEFAULT_DATA_QUALITY_RULESET = """
    Rules = [
        ColumnCount > 0
    ]
"""

# Script generated for node Step Trainer Landing
step_trainer_landing_node = glueContext.create_dynamic_frame.from_catalog(
    database="stedi",
    table_name="step_trainer_landing_folder",
    transformation_ctx="step_trainer_landing_node"
)

# Script generated for node Customer Curated
customer_curated_node = glueContext.create_dynamic_frame.from_catalog(
    database="stedi",
    table_name="customer_curated",
    transformation_ctx="customer_curated_node"
)

# Script generated for node Inner Join
InnerJoin_node = Join.apply(
    frame1=step_trainer_landing_node,
    frame2=customer_curated_node,
    keys1=["serialNumber"],
    keys2=["serialnumber"],
    transformation_ctx="InnerJoin_node"
)

# Script generated for node SQL Query
SqlQuery = '''
SELECT c.*,
       s.sensorReadingTime,
       s.distanceFromObject
FROM step_trainer_landing_folder s
JOIN customer_curated c ON s.serialNumber = c.serialnumber
'''
SQLQuery_node = sparkSqlQuery(
    glueContext,
    query=SqlQuery,
    mapping={
        "step_trainer_landing_folder": step_trainer_landing_node,
        "customer_curated": customer_curated_node
    },
    transformation_ctx="SQLQuery_node"
)

# Script generated for node Step Trainer Trusted
EvaluateDataQuality().process_rows(
    frame=SQLQuery_node,
    ruleset=DEFAULT_DATA_QUALITY_RULESET,
    publishing_options={
        "dataQualityEvaluationContext": "EvaluateDataQuality_node",
        "enableDataQualityResultsPublishing": True
    },
    additional_options={
        "dataQualityResultsPublishing.strategy": "BEST_EFFORT",
        "observations.scope": "ALL"
    }
)

step_trainer_trusted_sink = glueContext.getSink(
    path="s3://step-trainer--bucket/step_trainer_trusted/",
    connection_type="s3",
    updateBehavior="UPDATE_IN_DATABASE",
    partitionKeys=[],
    compression="snappy",
    enableUpdateCatalog=True,
    transformation_ctx="step_trainer_trusted_sink"
)

step_trainer_trusted_sink.setCatalogInfo(
    catalogDatabase="stedi",
    catalogTableName="step_trainer_trusted"
)
step_trainer_trusted_sink.setFormat("parquet")
step_trainer_trusted_sink.writeFrame(SQLQuery_node)

job.commit()